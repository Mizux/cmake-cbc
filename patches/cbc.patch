diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..3093598
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,3 @@
+*.swp
+.vs/
+build/
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..e84b553
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,199 @@
+cmake_minimum_required(VERSION 3.0.2)
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
+if(NOT CMAKE_BUILD_TYPE)
+  set(CMAKE_BUILD_TYPE "Release" CACHE STRING
+		"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
+		FORCE)
+endif(NOT CMAKE_BUILD_TYPE)
+
+# Not a subproject -> add find_package macro
+if ("^${CMAKE_SOURCE_DIR}$" STREQUAL "^${CMAKE_CURRENT_SOURCE_DIR}$")
+	# Use find_package everywhere, no-op if it's a target
+	macro(find_package)
+		if(NOT TARGET ${ARGV0} AND NOT TARGET ${ARGV0}::${ARGV0})
+			_find_package(${ARGV})
+		else()
+			if(TARGET ${ARGV0})
+				get_target_property(TGT_VER ${ARGV0} VERSION)
+				set(TGT ${ARGV0})
+			else()
+				get_target_property(TGT_VER ${ARGV0}::${ARGV0} VERSION)
+				set(TGT ${ARGV0}::${ARGV0})
+			endif()
+			message(STATUS "Found ${ARGV0}: CMake Target ${TGT} (found version \"${TGT_VER}\")")
+			set(${ARGV0}_FOUND TRUE)
+		endif()
+	endmacro()
+endif()
+
+project(Coin VERSION 2.9.9 LANGUAGES C CXX)
+message(STATUS "Project: Coin")
+
+include(CTest)
+include(ParseAc)
+
+# ZLIB
+find_package(ZLIB REQUIRED)
+set(HAVE_ZLIB_H "1" CACHE INTERNAL "Use zlib")
+set(COIN_HAS_ZLIB "1" CACHE INTERNAL "Use zlib")
+
+# PTHREAD
+set(THREADS_PREFER_PTHREAD_FLAG ON)
+find_package(Threads REQUIRED)
+
+# Flags
+include (CheckIncludeFile)
+check_include_file(math.h HAVE_MATH_H)
+check_include_file(ctype.h HAVE_CTYPE_H)
+check_include_file(inttypes.h HAVE_INTTYPES_H)
+check_include_file(float.h HAVE_FLOAT_H)
+check_include_file(ieeefp.h HAVE_IEEEFP_H)
+check_include_file(stdarg.h HAVE_STDARG_H)
+check_include_file(stddef.h HAVE_STDDEF_H)
+check_include_file(stdint.h HAVE_STDINT_H)
+check_include_file(stdio.h HAVE_STDIO_H)
+check_include_file(stdlib.h HAVE_STDLIB_H)
+check_include_file(assert.h HAVE_ASSERT_H)
+check_include_file(dlfcn.h HAVE_DLFCN_H)
+check_include_file(endian.h HAVE_ENDIAN_H)
+check_include_file(memory.h HAVE_MEMORY_H)
+check_include_file(strings.h HAVE_STRINGS_H)
+check_include_file(string.h HAVE_STRING_H)
+check_include_file(time.h HAVE_TIME_H)
+check_include_file(unistd.h HAVE_UNISTD_H)
+check_include_file(sys/stat.h HAVE_SYS_STAT_H)
+check_include_file(sys/types.h HAVE_SYS_TYPES_H)
+
+include (CheckIncludeFileCXX)
+check_include_file_cxx(cmath HAVE_CMATH)
+check_include_file_cxx(cctype HAVE_CCTYPE)
+check_include_file_cxx(cinttypes HAVE_CINTTYPES)
+check_include_file_cxx(cfloat HAVE_CFLOAT)
+check_include_file_cxx(cieeefp HAVE_CIEEEFP)
+check_include_file_cxx(cstdarg HAVE_CSTDARG)
+check_include_file_cxx(cstddef HAVE_CSTDDEF)
+check_include_file_cxx(cstdint HAVE_CSTDINT)
+check_include_file_cxx(cstdio HAVE_CSTDIO)
+check_include_file_cxx(cstdlib HAVE_CSTDLIB)
+check_include_file_cxx(cassert HAVE_CASSERT)
+check_include_file_cxx(cstring HAVE_CSTRING)
+check_include_file_cxx(ctime HAVE_CTIME)
+
+set(STDC_HEADERS 1 CACHE INTERNAL "System has ANSI C header files")
+
+set(TEST_INCLUDES "")
+if(HAVE_CMATH)
+	list(APPEND TEST_INCLUDES "cmath")
+endif()
+if(HAVE_CFLOAT)
+	list(APPEND TEST_INCLUDES "cfloat")
+endif()
+if(HAVE_CIEEEFP)
+	list(APPEND TEST_INCLUDES "cieeefp")
+endif()
+if(HAVE_MATH_H)
+	list(APPEND TEST_INCLUDES "math.h")
+endif()
+if(HAVE_FLOAT_H)
+	list(APPEND TEST_INCLUDES "float.h")
+endif()
+if(HAVE_IEEEFP_H)
+	list(APPEND TEST_INCLUDES "ieeefp.h")
+endif()
+
+# ISFINITE
+include(CheckCXXSourceCompiles)
+check_cxx_source_compiles(
+  "#include <cmath>\nint main(){return std::isfinite(0);}"
+  HAVE_STD_ISFINITE)
+include(CheckFunctionExists)
+include(CheckCXXSymbolExists)
+check_cxx_symbol_exists(isfinite "${TEST_INCLUDES}" HAVE_ISFINITE)
+check_cxx_symbol_exists(finite   "${TEST_INCLUDES}" HAVE_FINITE)
+check_cxx_symbol_exists(_finite  "${TEST_INCLUDES}" HAVE__FINITE)
+check_cxx_symbol_exists(__finite "${TEST_INCLUDES}" HAVE___FINITE)
+if(HAVE_STD_ISFINITE)
+	set(COIN_C_FINITE "std::isfinite")
+elseif(HAVE_ISFINITE)
+	set(COIN_C_FINITE "isfinite")
+elseif(HAVE_FINITE)
+	set(COIN_C_FINITE "finite")
+elseif(HAVE__FINITE)
+	set(COIN_C_FINITE "_finite")
+elseif(HAVE___FINITE)
+	set(COIN_C_FINITE "__finite")
+else()
+	message(FATAL_ERROR "Can't find isfinite()")
+endif()
+message(STATUS "Found isfinite: ${COIN_C_FINITE}")
+
+# ISNAN
+include(CheckCXXSourceCompiles)
+check_cxx_source_compiles(
+  "#include <cmath>\nint main(){return std::isnan(0);}"
+  HAVE_STD_ISNAN)
+include(CheckFunctionExists)
+include(CheckCXXSymbolExists)
+check_cxx_symbol_exists(isnan   "${TEST_INCLUDES}" HAVE_ISNAN)
+check_cxx_symbol_exists(_isnan  "${TEST_INCLUDES}" HAVE__ISNAN)
+check_cxx_symbol_exists(__isnan "${TEST_INCLUDES}" HAVE___ISNAN)
+if(HAVE_STD_ISNAN)
+	set(COIN_C_ISNAN "std::isnan")
+elseif(HAVE_ISNAN)
+	set(COIN_C_ISNAN "isnan")
+elseif(HAVE__ISNAN)
+	set(COIN_C_ISNAN "_isnan")
+elseif(HAVE___ISNAN)
+	set(COIN_C_ISNAN "__isnan")
+else()
+	message(FATAL_ERROR "Can't find isnan()")
+endif()
+message(STATUS "Found isnan: ${COIN_C_ISNAN}")
+
+# Basic type
+include(CheckTypeSize)
+check_type_size("int64_t" SIZEOF_INT64_T)
+check_type_size("long long" SIZEOF_LONG_LONG)
+check_type_size("long" SIZEOF_LONG)
+check_type_size("uint64_t" SIZEOF_UINT64_T)
+check_type_size("unsigned long long" SIZEOF_ULONG_LONG)
+check_type_size("unsigned long" SIZEOF_ULONG)
+check_type_size("intptr_t" SIZEOF_INTPTR_T)
+check_type_size("int *" SIZEOF_INT_P)
+
+if(SIZEOF_INT64_T EQUAL "8")
+  set(COIN_INT64_T "int64_t")
+elseif(SIZEOF_LONG EQUAL "8")
+  set(COIN_INT64_T "long")
+elseif(SIZEOF_LONG_LONG EQUAL "8")
+  set(COIN_INT64_T "long long")
+else()
+	message(FATAL_ERROR "Can't find suitable int64_t")
+endif()
+message(STATUS "Found int64_t: ${COIN_INT64_T}")
+
+if(SIZEOF_UINT64_T EQUAL "8")
+  set(COIN_UINT64_T "uint64_t")
+elseif(SIZEOF_ULONG EQUAL "8")
+  set(COIN_INT64_T "unsigned long")
+elseif(SIZEOF_ULONG_LONG EQUAL "8")
+  set(COIN_INT64_T "unsigned long long")
+else()
+	message(FATAL_ERROR "Can't find suitable uint64_t")
+endif()
+message(STATUS "Found uint64_t: ${COIN_UINT64_T}")
+
+if(SIZEOF_INTPTR_T)
+	set(COIN_INTPTR_T "intptr_t")
+elseif(SIZEOF_INT_P)
+  set(COIN_INTPTR_T "int *")
+else()
+	message(FATAL_ERROR "Can't find suitable intptr_t")
+endif()
+message(STATUS "Found intptr_t: ${COIN_INTPTR_T}")
+
+add_subdirectory(CoinUtils)
+add_subdirectory(Osi)
+add_subdirectory(Clp)
+add_subdirectory(Cgl)
+add_subdirectory(Cbc)
diff --git a/Cbc/CMakeLists.txt b/Cbc/CMakeLists.txt
new file mode 100644
index 0000000..0a44b06
--- /dev/null
+++ b/Cbc/CMakeLists.txt
@@ -0,0 +1,272 @@
+message(STATUS "Subproject: Cbc")
+
+find_package(CoinUtils REQUIRED)
+find_package(Osi REQUIRED)
+find_package(Clp REQUIRED)
+find_package(Cgl REQUIRED)
+
+set(NAME "CBC")
+parse_ac(VERSION MAJOR MINOR PATCH)
+
+set(COIN_${NAME}_CHECKLEVEL "0" CACHE INTERNAL
+	"${NAME} check level")
+set(COIN_${NAME}_VERBOSITY "0" CACHE INTERNAL
+	"${NAME} verbosity level")
+configure_file(config.h.cmake.in config.h)
+configure_file(config_cbc.h.cmake.in config_cbc.h)
+
+set(_SRCS
+	#src/CbcBranchBase.cpp
+	src/CbcBranchAllDifferent.cpp
+	src/CbcBranchCut.cpp
+	src/CbcBranchDecision.cpp
+	src/CbcBranchDefaultDecision.cpp
+	src/CbcBranchDynamic.cpp
+	src/CbcBranchingObject.cpp
+	src/CbcBranchLotsize.cpp
+	src/CbcBranchToFixLots.cpp
+	src/CbcClique.cpp
+	src/CbcCompareDefault.cpp
+	src/CbcCompareDepth.cpp
+	src/CbcCompareEstimate.cpp
+	src/CbcCompareObjective.cpp
+	src/CbcConsequence.cpp
+	src/CbcCountRowCut.cpp
+	src/CbcCutGenerator.cpp
+	src/CbcCutModifier.cpp
+	src/CbcCutSubsetModifier.cpp
+	src/CbcDummyBranchingObject.cpp
+	src/CbcEventHandler.cpp
+	src/CbcFathom.cpp
+	src/CbcFathomDynamicProgramming.cpp
+	src/CbcFixVariable.cpp
+	src/CbcFollowOn.cpp
+	src/CbcFullNodeInfo.cpp
+	src/CbcGenBaB.cpp
+	src/CbcGenCbcParam.cpp
+	src/CbcGenCbcParamUtils.cpp
+	src/CbcGenCtlBlk.cpp
+	src/CbcGeneral.cpp
+	src/CbcGeneralDepth.cpp
+	src/CbcGenMessages.cpp
+	src/CbcGenOsiParam.cpp
+	src/CbcGenOsiParamUtils.cpp
+	src/CbcGenParam.cpp
+	src/CbcGenParamUtils.cpp
+	src/CbcGenSolution.cpp
+	src/CbcGenSolvers.cpp
+	src/CbcHeuristic.cpp
+	src/CbcHeuristicDINS.cpp
+	src/CbcHeuristicDiveCoefficient.cpp
+	src/CbcHeuristicDive.cpp
+	src/CbcHeuristicDiveFractional.cpp
+	src/CbcHeuristicDiveGuided.cpp
+	src/CbcHeuristicDiveLineSearch.cpp
+	src/CbcHeuristicDivePseudoCost.cpp
+	src/CbcHeuristicDiveVectorLength.cpp
+	src/CbcHeuristicDW.cpp
+	src/CbcHeuristicFPump.cpp
+	src/CbcHeuristicGreedy.cpp
+	src/CbcHeuristicLocal.cpp
+	src/CbcHeuristicPivotAndFix.cpp
+	src/CbcHeuristicRandRound.cpp
+	src/CbcHeuristicRENS.cpp
+	src/CbcHeuristicRINS.cpp
+	src/CbcHeuristicVND.cpp
+	src/CbcMessage.cpp
+	src/CbcModel.cpp
+	src/CbcNode.cpp
+	src/CbcNodeInfo.cpp
+	src/CbcNWay.cpp
+	src/CbcObject.cpp
+	src/CbcObjectUpdateData.cpp
+	src/CbcParam.cpp
+	src/CbcPartialNodeInfo.cpp
+	src/CbcSimpleInteger.cpp
+	src/CbcSimpleIntegerDynamicPseudoCost.cpp
+	src/CbcSimpleIntegerPseudoCost.cpp
+	src/CbcSOS.cpp
+	src/CbcStatistics.cpp
+	src/CbcStrategy.cpp
+	src/CbcSubProblem.cpp
+	src/CbcThread.cpp
+	src/CbcTree.cpp
+	src/CbcTreeLocal.cpp)
+
+set(_HDRS
+	src/CbcConfig.h
+	src/CbcBranchActual.hpp
+	src/CbcBranchAllDifferent.hpp
+	src/CbcBranchBase.hpp
+	src/CbcBranchDynamic.hpp
+	src/CbcBranchCut.hpp
+	src/CbcBranchDecision.hpp
+	src/CbcBranchDefaultDecision.hpp
+	src/CbcBranchingObject.hpp
+	src/CbcBranchLotsize.hpp
+	src/CbcBranchToFixLots.hpp
+	src/CbcCompareActual.hpp
+	src/CbcCompareBase.hpp
+	src/CbcCompareDefault.hpp
+	src/CbcCompareDepth.hpp
+	src/CbcCompareEstimate.hpp
+	src/CbcCompareObjective.hpp
+	src/CbcConsequence.hpp
+	src/CbcClique.hpp
+	src/CbcCompare.hpp
+	src/CbcCountRowCut.hpp
+	src/CbcCutGenerator.hpp
+	src/CbcCutModifier.hpp
+	src/CbcCutSubsetModifier.hpp
+	src/CbcDummyBranchingObject.hpp
+	src/CbcFathom.hpp
+	src/CbcEventHandler.hpp
+	src/CbcFathomDynamicProgramming.hpp
+	src/CbcFeasibilityBase.hpp
+	src/CbcFixVariable.hpp
+	src/CbcFollowOn.hpp
+	src/CbcFullNodeInfo.hpp
+	src/CbcGeneral.hpp
+	src/CbcGeneralDepth.hpp
+	src/CbcHeuristic.hpp
+	src/CbcHeuristicDINS.hpp
+	src/CbcHeuristicDive.hpp
+	src/CbcHeuristicDiveCoefficient.hpp
+	src/CbcHeuristicDiveFractional.hpp
+	src/CbcHeuristicDiveGuided.hpp
+	src/CbcHeuristicDiveLineSearch.hpp
+	src/CbcHeuristicDivePseudoCost.hpp
+	src/CbcHeuristicDiveVectorLength.hpp
+	src/CbcHeuristicDW.hpp
+	src/CbcHeuristicFPump.hpp
+	src/CbcHeuristicGreedy.hpp
+	src/CbcHeuristicLocal.hpp
+	src/CbcHeuristicPivotAndFix.hpp
+	src/CbcHeuristicRandRound.hpp
+	src/CbcHeuristicRENS.hpp
+	src/CbcHeuristicRINS.hpp
+	src/CbcHeuristicVND.hpp
+	src/CbcMessage.hpp
+	src/CbcModel.hpp
+	src/CbcNode.hpp
+	src/CbcNodeInfo.hpp
+	src/CbcNWay.hpp
+	src/CbcObject.hpp
+	src/CbcObjectUpdateData.hpp
+	src/CbcPartialNodeInfo.hpp
+	src/CbcSimpleInteger.hpp
+	src/CbcSimpleIntegerDynamicPseudoCost.hpp
+	src/CbcSimpleIntegerPseudoCost.hpp
+	src/CbcStrategy.hpp
+	src/CbcSOS.hpp
+	src/CbcSubProblem.hpp
+	src/CbcTree.hpp
+	src/CbcTreeLocal.hpp
+	src/ClpConstraintAmpl.hpp
+	src/ClpAmplObjective.hpp)
+
+add_library(Cbc ${_SRCS} ${_HDRS})
+target_include_directories(Cbc PUBLIC
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
+target_compile_definitions(Cbc
+	PUBLIC HAVE_CONFIG_H
+	PRIVATE CBC_BUILD)
+if(WIN32)
+	target_compile_definitions(Cbc _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE)
+endif ()
+target_link_libraries(Cbc PUBLIC
+	CoinUtils::CoinUtils
+	Osi::Osi
+	Clp::Clp
+	Cgl::Cgl)
+set_target_properties(Cbc PROPERTIES
+	PUBLIC_HEADER "${_HDRS};${CMAKE_CURRENT_BINARY_DIR}/config_cbc.h"
+	VERSION ${VERSION})
+add_library(Cbc::Cbc ALIAS Cbc)
+
+# Install
+include(GNUInstallDirs)
+install(TARGETS Cbc
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/coin/
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	)
+
+##############
+##  OsiCbc  ##
+##############
+set(_SRCS src/OsiCbc/OsiCbcSolverInterface.cpp)
+set(_HDRS	src/OsiCbc/OsiCbcSolverInterface.hpp)
+
+add_library(OsiCbc ${_SRCS} ${_HDRS})
+target_include_directories(OsiCbc PUBLIC
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/OsiCbc>)
+#target_compile_definitions(OsiCbc PRIVATE ...)
+if(WIN32)
+	target_compile_definitions(OsiCbc _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE)
+endif ()
+target_link_libraries(OsiCbc PUBLIC
+	CoinUtils::CoinUtils
+	Osi::Osi
+	Cbc::Cbc)
+set_target_properties(OsiCbc PROPERTIES
+	PUBLIC_HEADER "${_HDRS}"
+	VERSION ${VERSION})
+add_library(OsiCbc::OsiCbc ALIAS OsiCbc)
+
+# Install
+include(GNUInstallDirs)
+install(TARGETS OsiCbc
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/coin/
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	)
+
+#################
+##  CbcSolver  ##
+#################
+set(_SRCS
+	src/Cbc_C_Interface.cpp
+	src/CbcCbcParam.cpp
+	src/Cbc_ampl.cpp
+	src/CbcLinked.cpp
+	src/CbcLinkedUtils.cpp
+	src/CbcSolverHeuristics.cpp
+	src/CbcSolverAnalyze.cpp
+	src/CbcSolver.cpp
+	src/CbcMipStartIO.cpp
+	src/CbcSolverExpandKnapsack.cpp)
+
+set(_HDRS
+	src/Cbc_C_Interface.h
+	src/Cbc_ampl.h
+	src/CbcLinked.hpp
+	src/CbcSolver.hpp
+	src/CbcMipStartIO.hpp)
+
+add_library(CbcSolver ${_SRCS} ${_HDRS})
+target_include_directories(CbcSolver PUBLIC
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)
+target_compile_definitions(CbcSolver
+	PRIVATE CBC_THREAD_SAFE CBC_NO_INTERRUPT)
+if(WIN32)
+	target_compile_definitions(CbcSolver _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE)
+endif ()
+target_link_libraries(CbcSolver PUBLIC
+	Cbc::Cbc)
+set_target_properties(CbcSolver PROPERTIES
+	PUBLIC_HEADER "${_HDRS}"
+	VERSION ${VERSION})
+add_library(CbcSolver::CbcSolver ALIAS CbcSolver)
+
+# Install
+include(GNUInstallDirs)
+install(TARGETS CbcSolver
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/coin/
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	)
diff --git a/Cbc/config.h.cmake.in b/Cbc/config.h.cmake.in
new file mode 100644
index 0000000..719ed8d
--- /dev/null
+++ b/Cbc/config.h.cmake.in
@@ -0,0 +1,115 @@
+/*config.h. Generated by configure_file.*/
+
+#define COIN_HAS_COINUTILS 1
+#define COIN_HAS_OSI 1
+#define COIN_HAS_CLP 1
+#define ${NAME}_DEFAULT_SOLVER "clp"
+
+/* VERSION */
+#define VERSION "${VERSION}"
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+/* HAVE_MATH_H */
+#cmakedefine HAVE_MATH_H ${HAVE_MATH_H}
+/* HAVE_CTYPE_H */
+#cmakedefine HAVE_CTYPE_H ${HAVE_CTYPE_H}
+/* HAVE_INTTYPES_H */
+#cmakedefine HAVE_INTTYPES_H ${HAVE_INTTYPES_H}
+/* HAVE_FLOAT_H */
+#cmakedefine HAVE_FLOAT_H ${HAVE_FLOAT_H}
+/* HAVE_IEEEFP_H */
+#cmakedefine HAVE_IEEEFP_H ${HAVE_IEEEFP_H}
+/* HAVE_STDARG_H */
+#cmakedefine HAVE_STDARG_H ${HAVE_STDARG_H}
+/* HAVE_STDDEF_H */
+#cmakedefine HAVE_STDDEF_H ${HAVE_STDDEF_H}
+/* HAVE_STDINT_H */
+#cmakedefine HAVE_STDINT_H ${HAVE_STDINT_H}
+/* HAVE_STDIO_H */
+#cmakedefine HAVE_STDIO_H ${HAVE_STDIO_H}
+/* HAVE_STDLIB_H */
+#cmakedefine HAVE_STDLIB_H ${HAVE_STDLIB_H}
+/* HAVE_ASSERT_H */
+#cmakedefine HAVE_ASSERT_H ${HAVE_ASSERT_H}
+/* HAVE_DLFCN_H */
+#cmakedefine HAVE_DLFCN_H ${HAVE_DLFCN_H}
+/* HAVE_ENDIAN_H */
+#cmakedefine HAVE_ENDIAN_H ${HAVE_ENDIAN_H}
+/* HAVE_MEMORY_H */
+#cmakedefine HAVE_MEMORY_H ${HAVE_MEMORY_H}
+/* HAVE_STRINGS_H */
+#cmakedefine HAVE_STRINGS_H ${HAVE_STRINGS_H}
+/* HAVE_STRING_H */
+#cmakedefine HAVE_STRING_H ${HAVE_STRING_H}
+/* HAVE_TIME_H */
+#cmakedefine HAVE_TIME_H ${HAVE_TIME_H}
+/* HAVE_UNISTD_H */
+#cmakedefine HAVE_UNISTD_H ${HAVE_UNISTD_H}
+/* HAVE_SYS_STAT_H */
+#cmakedefine HAVE_SYS_STAT_H ${HAVE_SYS_STAT_H}
+/* HAVE_SYS_TYPES_H */
+#cmakedefine HAVE_SYS_TYPES_H ${HAVE_SYS_TYPES_H}
+
+/* HAVE_CMATH */
+#cmakedefine HAVE_CMATH ${HAVE_CMATH}
+/* HAVE_CCTYPE */
+#cmakedefine HAVE_CCTYPE ${HAVE_CCTYPE}
+/* HAVE_CINTTYPES */
+#cmakedefine HAVE_CINTTYPES ${HAVE_CINTTYPES}
+/* HAVE_CFLOAT */
+#cmakedefine HAVE_CFLOAT ${HAVE_CFLOAT}
+/* HAVE_CIEEEFP */
+#cmakedefine HAVE_CIEEEFP ${HAVE_CIEEEFP}
+/* HAVE_CSTDARG */
+#cmakedefine HAVE_CSTDARG ${HAVE_CSTDARG}
+/* HAVE_CSTDDEF */
+#cmakedefine HAVE_CSTDDEF ${HAVE_CSTDDEF}
+/* HAVE_CSTDINT */
+#cmakedefine HAVE_CSTDINT ${HAVE_CSTDINT}
+/* HAVE_CSTDIO */
+#cmakedefine HAVE_CSTDIO ${HAVE_CSTDIO}
+/* HAVE_CSTDLIB */
+#cmakedefine HAVE_CSTDLIB ${HAVE_CSTDLIB}
+/* HAVE_CASSERT */
+#cmakedefine HAVE_CASSERT ${HAVE_CASSERT}
+/* HAVE_CSTRING */
+#cmakedefine HAVE_CSTRING ${HAVE_CSTRING}
+/* HAVE_CTIME */
+#cmakedefine HAVE_CTIME ${HAVE_CTIME}
+
+/* COIN_C_FINITE */
+#cmakedefine COIN_C_FINITE ${COIN_C_FINITE}
+/* COIN_C_ISNAN */
+#cmakedefine COIN_C_ISNAN ${COIN_C_ISNAN}
+/* COIN_INT64_T */
+#cmakedefine COIN_INT64_T ${COIN_INT64_T}
+/* COIN_UINT64_T */
+#cmakedefine COIN_UINT64_T ${COIN_UINT64_T}
+/* COIN_INTPTR_T */
+#cmakedefine COIN_INTPTR_T ${COIN_INTPTR_T}
+
+/* COIN_${NAME}_CHECKLEVEL */
+#define COIN_${NAME}_CHECKLEVEL ${COIN_${NAME}_CHECKLEVEL}
+/* COIN_${NAME}_VERBOSITY */
+#define COIN_${NAME}_VERBOSITY ${COIN_${NAME}_VERBOSITY}
+
+/* PACKAGE */
+#cmakedefine PACKAGE
+/* PACKAGE_NAME */
+#cmakedefine PACKAGE_NAME
+/* PACKAGE_VERSION */
+#cmakedefine PACKAGE_VERSION
+/* PACKAGE_STRING */
+#cmakedefine PACKAGE_STRING
+/* PACKAGE_TARNAME */
+#cmakedefine PACKAGE_TARNAME
+/* PACKAGE_BUGREPORT */
+#cmakedefine PACKAGE_BUGREPORT
+
diff --git a/Cbc/config_cbc.h.cmake.in b/Cbc/config_cbc.h.cmake.in
new file mode 100644
index 0000000..8dc44bf
--- /dev/null
+++ b/Cbc/config_cbc.h.cmake.in
@@ -0,0 +1,13 @@
+#ifndef __CONFIG_${NAME}_H__
+#define __CONFIG_${NAME}_H__
+
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+#endif
diff --git a/Cgl/CMakeLists.txt b/Cgl/CMakeLists.txt
new file mode 100644
index 0000000..5c49718
--- /dev/null
+++ b/Cgl/CMakeLists.txt
@@ -0,0 +1,150 @@
+message(STATUS "Subproject: Cgl")
+
+find_package(CoinUtils REQUIRED)
+find_package(Osi REQUIRED)
+find_package(OsiClp REQUIRED)
+
+set(NAME "CGL")
+parse_ac(VERSION MAJOR MINOR PATCH)
+
+set(COIN_${NAME}_CHECKLEVEL "0" CACHE INTERNAL
+	"${NAME} check level")
+set(COIN_${NAME}_VERBOSITY "0" CACHE INTERNAL
+	"${NAME} verbosity level")
+configure_file(config.h.cmake.in config.h)
+configure_file(config_cgl.h.cmake.in config_cgl.h)
+
+set(_SRCS
+	src/CglMixedIntegerRounding/CglMixedIntegerRoundingTest.cpp
+	src/CglMixedIntegerRounding/CglMixedIntegerRounding.cpp
+	src/CglDuplicateRow/CglDuplicateRow.cpp
+	src/CglCutGenerator.cpp
+	src/CglPreProcess/CglPreProcess.cpp
+	src/CglProbing/CglProbing.cpp
+	src/CglProbing/CglProbingTest.cpp
+	src/CglMixedIntegerRounding2/CglMixedIntegerRounding2.cpp
+	src/CglMixedIntegerRounding2/CglMixedIntegerRounding2Test.cpp
+	src/CglLandP/CglLandPUtils.cpp
+	src/CglLandP/CglLandPTest.cpp
+	src/CglLandP/CglLandPTabRow.cpp
+	src/CglLandP/CglLandPSimplex.cpp
+	src/CglLandP/CglLandPValidator.cpp
+	src/CglLandP/CglLandPMessages.cpp
+	src/CglLandP/CglLandP.cpp
+	src/CglOddHole/CglOddHoleTest.cpp
+	src/CglOddHole/CglOddHole.cpp
+	src/CglRedSplit/CglRedSplitParam.cpp
+	src/CglRedSplit/CglRedSplit.cpp
+	src/CglRedSplit/CglRedSplitTest.cpp
+	src/CglAllDifferent/CglAllDifferent.cpp
+	src/CglKnapsackCover/CglKnapsackCoverTest.cpp
+	src/CglKnapsackCover/CglKnapsackCover.cpp
+	src/CglSimpleRounding/CglSimpleRoundingTest.cpp
+	src/CglSimpleRounding/CglSimpleRounding.cpp
+	src/CglZeroHalf/CglZeroHalfTest.cpp
+	src/CglZeroHalf/Cgl012cut.cpp
+	src/CglZeroHalf/CglZeroHalf.cpp
+	src/CglRedSplit2/CglRedSplit2Test.cpp
+	src/CglRedSplit2/CglRedSplit2Param.cpp
+	src/CglRedSplit2/CglRedSplit2.cpp
+	src/CglMessage.cpp
+	src/CglStored.cpp
+	src/CglParam.cpp
+	src/CglResidualCapacity/CglResidualCapacity.cpp
+	src/CglResidualCapacity/CglResidualCapacityTest.cpp
+	src/CglTwomir/CglTwomirTest.cpp
+	src/CglTwomir/CglTwomir.cpp
+	src/CglFlowCover/CglFlowCoverTest.cpp
+	src/CglFlowCover/CglFlowCover.cpp
+	src/CglClique/CglCliqueHelper.cpp
+	src/CglClique/CglCliqueTest.cpp
+	src/CglClique/CglClique.cpp
+	src/CglTreeInfo.cpp
+	src/CglLiftAndProject/CglLiftAndProject.cpp
+	src/CglGomory/CglGomoryTest.cpp
+	src/CglGomory/CglGomory.cpp
+	src/CglGMI/CglGMI.cpp
+	src/CglGMI/CglGMIParam.cpp)
+
+set(_HDRS
+	src/CglConfig.h
+	src/CglMixedIntegerRounding/CglMixedIntegerRounding.hpp
+	src/CglDuplicateRow/CglDuplicateRow.hpp
+	src/CglStored.hpp
+	src/CglPreProcess/CglPreProcess.hpp
+	src/CglProbing/CglProbing.hpp
+	src/CglMixedIntegerRounding2/CglMixedIntegerRounding2.hpp
+	src/CglLandP/CglLandP.hpp
+	src/CglLandP/CglLandPUtils.hpp
+	src/CglLandP/CglLandPValidator.hpp
+	src/CglLandP/CglLandPTabRow.hpp
+	src/CglLandP/CglLandPMessages.hpp
+	src/CglLandP/CglLandPSimplex.hpp
+	src/CglOddHole/CglOddHole.hpp
+	src/CglRedSplit/CglRedSplitParam.hpp
+	src/CglRedSplit/CglRedSplit.hpp
+	src/CglAllDifferent/CglAllDifferent.hpp
+	src/CglKnapsackCover/CglKnapsackCover.hpp
+	src/CglSimpleRounding/CglSimpleRounding.hpp
+	src/CglMessage.hpp
+	src/CglZeroHalf/CglZeroHalf.hpp
+	src/CglZeroHalf/Cgl012cut.hpp
+	src/CglRedSplit2/CglRedSplit2Param.hpp
+	src/CglRedSplit2/CglRedSplit2.hpp
+	src/CglCutGenerator.hpp
+	src/CglResidualCapacity/CglResidualCapacity.hpp
+	src/CglTwomir/CglTwomir.hpp
+	src/CglFlowCover/CglFlowCover.hpp
+	src/CglClique/CglClique.hpp
+	src/CglLiftAndProject/CglLiftAndProject.hpp
+	src/CglGomory/CglGomory.hpp
+	src/CglGMI/CglGMIParam.hpp
+	src/CglGMI/CglGMI.hpp
+	src/CglParam.hpp
+	src/CglTreeInfo.hpp)
+
+add_library(Cgl ${_SRCS} ${_HDRS})
+target_include_directories(Cgl PUBLIC
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglClique>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglDuplicateRow>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglFlowCover>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglGMI>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglGomory>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglKnapsackCover>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglLandP>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglMixedIntegerRounding>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglMixedIntegerRounding2>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglPreProcess>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglProbing>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglOddHole>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglRedSplit>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglRedSplit2>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglResidualCapacity>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglSimpleRounding>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglTwomir>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/CglZeroHalf>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
+target_compile_definitions(Cgl
+	PUBLIC HAVE_CONFIG_H
+	PRIVATE CGL_BUILD)
+if(WIN32)
+	target_compile_definitions(Cgl _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE)
+endif ()
+target_link_libraries(Cgl PUBLIC
+	CoinUtils::CoinUtils
+	Osi::Osi
+	OsiClp::OsiClp)
+set_target_properties(Cgl PROPERTIES
+	PUBLIC_HEADER "${_HDRS};${CMAKE_CURRENT_BINARY_DIR}/config_cgl.h"
+	VERSION ${VERSION})
+add_library(Cgl::Cgl ALIAS Cgl)
+
+# Install
+include(GNUInstallDirs)
+install(TARGETS Cgl
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/coin/
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	)
diff --git a/Cgl/config.h.cmake.in b/Cgl/config.h.cmake.in
new file mode 100644
index 0000000..35329dc
--- /dev/null
+++ b/Cgl/config.h.cmake.in
@@ -0,0 +1,114 @@
+/*config.h. Generated by configure_file.*/
+
+#define COIN_HAS_COINUTILS 1
+#define COIN_HAS_OSI 1
+#define COIN_HAS_OSICLP 1
+
+/* VERSION */
+#define VERSION "${VERSION}"
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+/* HAVE_MATH_H */
+#cmakedefine HAVE_MATH_H ${HAVE_MATH_H}
+/* HAVE_CTYPE_H */
+#cmakedefine HAVE_CTYPE_H ${HAVE_CTYPE_H}
+/* HAVE_INTTYPES_H */
+#cmakedefine HAVE_INTTYPES_H ${HAVE_INTTYPES_H}
+/* HAVE_FLOAT_H */
+#cmakedefine HAVE_FLOAT_H ${HAVE_FLOAT_H}
+/* HAVE_IEEEFP_H */
+#cmakedefine HAVE_IEEEFP_H ${HAVE_IEEEFP_H}
+/* HAVE_STDARG_H */
+#cmakedefine HAVE_STDARG_H ${HAVE_STDARG_H}
+/* HAVE_STDDEF_H */
+#cmakedefine HAVE_STDDEF_H ${HAVE_STDDEF_H}
+/* HAVE_STDINT_H */
+#cmakedefine HAVE_STDINT_H ${HAVE_STDINT_H}
+/* HAVE_STDIO_H */
+#cmakedefine HAVE_STDIO_H ${HAVE_STDIO_H}
+/* HAVE_STDLIB_H */
+#cmakedefine HAVE_STDLIB_H ${HAVE_STDLIB_H}
+/* HAVE_ASSERT_H */
+#cmakedefine HAVE_ASSERT_H ${HAVE_ASSERT_H}
+/* HAVE_DLFCN_H */
+#cmakedefine HAVE_DLFCN_H ${HAVE_DLFCN_H}
+/* HAVE_ENDIAN_H */
+#cmakedefine HAVE_ENDIAN_H ${HAVE_ENDIAN_H}
+/* HAVE_MEMORY_H */
+#cmakedefine HAVE_MEMORY_H ${HAVE_MEMORY_H}
+/* HAVE_STRINGS_H */
+#cmakedefine HAVE_STRINGS_H ${HAVE_STRINGS_H}
+/* HAVE_STRING_H */
+#cmakedefine HAVE_STRING_H ${HAVE_STRING_H}
+/* HAVE_TIME_H */
+#cmakedefine HAVE_TIME_H ${HAVE_TIME_H}
+/* HAVE_UNISTD_H */
+#cmakedefine HAVE_UNISTD_H ${HAVE_UNISTD_H}
+/* HAVE_SYS_STAT_H */
+#cmakedefine HAVE_SYS_STAT_H ${HAVE_SYS_STAT_H}
+/* HAVE_SYS_TYPES_H */
+#cmakedefine HAVE_SYS_TYPES_H ${HAVE_SYS_TYPES_H}
+
+/* HAVE_CMATH */
+#cmakedefine HAVE_CMATH ${HAVE_CMATH}
+/* HAVE_CCTYPE */
+#cmakedefine HAVE_CCTYPE ${HAVE_CCTYPE}
+/* HAVE_CINTTYPES */
+#cmakedefine HAVE_CINTTYPES ${HAVE_CINTTYPES}
+/* HAVE_CFLOAT */
+#cmakedefine HAVE_CFLOAT ${HAVE_CFLOAT}
+/* HAVE_CIEEEFP */
+#cmakedefine HAVE_CIEEEFP ${HAVE_CIEEEFP}
+/* HAVE_CSTDARG */
+#cmakedefine HAVE_CSTDARG ${HAVE_CSTDARG}
+/* HAVE_CSTDDEF */
+#cmakedefine HAVE_CSTDDEF ${HAVE_CSTDDEF}
+/* HAVE_CSTDINT */
+#cmakedefine HAVE_CSTDINT ${HAVE_CSTDINT}
+/* HAVE_CSTDIO */
+#cmakedefine HAVE_CSTDIO ${HAVE_CSTDIO}
+/* HAVE_CSTDLIB */
+#cmakedefine HAVE_CSTDLIB ${HAVE_CSTDLIB}
+/* HAVE_CASSERT */
+#cmakedefine HAVE_CASSERT ${HAVE_CASSERT}
+/* HAVE_CSTRING */
+#cmakedefine HAVE_CSTRING ${HAVE_CSTRING}
+/* HAVE_CTIME */
+#cmakedefine HAVE_CTIME ${HAVE_CTIME}
+
+/* COIN_C_FINITE */
+#cmakedefine COIN_C_FINITE ${COIN_C_FINITE}
+/* COIN_C_ISNAN */
+#cmakedefine COIN_C_ISNAN ${COIN_C_ISNAN}
+/* COIN_INT64_T */
+#cmakedefine COIN_INT64_T ${COIN_INT64_T}
+/* COIN_UINT64_T */
+#cmakedefine COIN_UINT64_T ${COIN_UINT64_T}
+/* COIN_INTPTR_T */
+#cmakedefine COIN_INTPTR_T ${COIN_INTPTR_T}
+
+/* COIN_${NAME}_CHECKLEVEL */
+#define COIN_${NAME}_CHECKLEVEL ${COIN_${NAME}_CHECKLEVEL}
+/* COIN_${NAME}_VERBOSITY */
+#define COIN_${NAME}_VERBOSITY ${COIN_${NAME}_VERBOSITY}
+
+/* PACKAGE */
+#cmakedefine PACKAGE
+/* PACKAGE_NAME */
+#cmakedefine PACKAGE_NAME
+/* PACKAGE_VERSION */
+#cmakedefine PACKAGE_VERSION
+/* PACKAGE_STRING */
+#cmakedefine PACKAGE_STRING
+/* PACKAGE_TARNAME */
+#cmakedefine PACKAGE_TARNAME
+/* PACKAGE_BUGREPORT */
+#cmakedefine PACKAGE_BUGREPORT
+
diff --git a/Cgl/config_cgl.h.cmake.in b/Cgl/config_cgl.h.cmake.in
new file mode 100644
index 0000000..8dc44bf
--- /dev/null
+++ b/Cgl/config_cgl.h.cmake.in
@@ -0,0 +1,13 @@
+#ifndef __CONFIG_${NAME}_H__
+#define __CONFIG_${NAME}_H__
+
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+#endif
diff --git a/Clp/CMakeLists.txt b/Clp/CMakeLists.txt
new file mode 100644
index 0000000..429c647
--- /dev/null
+++ b/Clp/CMakeLists.txt
@@ -0,0 +1,205 @@
+message(STATUS "Subproject: Clp")
+
+find_package(CoinUtils REQUIRED)
+find_package(Osi REQUIRED)
+
+set(NAME "CLP")
+parse_ac(VERSION MAJOR MINOR PATCH)
+
+set(COIN_${NAME}_CHECKLEVEL "0" CACHE INTERNAL
+	"${NAME} check level")
+set(COIN_${NAME}_VERBOSITY "0" CACHE INTERNAL
+	"${NAME} verbosity level")
+configure_file(config.h.cmake.in config.h)
+configure_file(config_clp.h.cmake.in config_clp.h)
+
+set(_SRCS
+	src/ClpCholeskyBase.cpp
+	src/ClpCholeskyDense.cpp
+	src/ClpConstraint.cpp
+	src/ClpConstraintLinear.cpp
+	src/ClpConstraintQuadratic.cpp
+	src/Clp_C_Interface.cpp
+	src/ClpDualRowDantzig.cpp
+	src/ClpDualRowPivot.cpp
+	src/ClpDualRowSteepest.cpp
+	src/ClpDummyMatrix.cpp
+	src/ClpDynamicExampleMatrix.cpp
+	src/ClpDynamicMatrix.cpp
+	src/ClpEventHandler.cpp
+	src/ClpFactorization.cpp
+	src/ClpGubDynamicMatrix.cpp
+	src/ClpGubMatrix.cpp
+	src/ClpHelperFunctions.cpp
+	src/ClpInterior.cpp
+	src/ClpLinearObjective.cpp
+	src/ClpMatrixBase.cpp
+	src/ClpMessage.cpp
+	src/ClpModel.cpp
+	src/ClpNetworkBasis.cpp
+	src/ClpNetworkMatrix.cpp
+	src/ClpNonLinearCost.cpp
+	src/ClpNode.cpp
+	src/ClpObjective.cpp
+	src/ClpPackedMatrix.cpp
+	src/ClpPlusMinusOneMatrix.cpp
+	src/ClpPredictorCorrector.cpp
+	src/ClpPdco.cpp
+	src/ClpPdcoBase.cpp
+	src/ClpLsqr.cpp
+	src/ClpPresolve.cpp
+	src/ClpPrimalColumnDantzig.cpp
+	src/ClpPrimalColumnPivot.cpp
+	src/ClpPrimalColumnSteepest.cpp
+	src/ClpQuadraticObjective.cpp
+	src/ClpSimplex.cpp
+	src/ClpSimplexDual.cpp
+	src/ClpSimplexNonlinear.cpp
+	src/ClpSimplexOther.cpp
+	src/ClpSimplexPrimal.cpp
+	src/ClpSolve.cpp
+	src/Idiot.cpp
+	src/IdiSolve.cpp)
+
+set(_HDRS
+	src/Clp_C_Interface.h
+	src/ClpConfig.h
+	src/ClpCholeskyBase.hpp
+	src/ClpCholeskyDense.hpp
+	src/ClpConstraint.hpp
+	src/ClpConstraintLinear.hpp
+	src/ClpConstraintQuadratic.hpp
+	src/ClpDualRowDantzig.hpp
+	src/ClpDualRowPivot.hpp
+	src/ClpDualRowSteepest.hpp
+	src/ClpDummyMatrix.hpp
+	src/ClpDynamicExampleMatrix.hpp
+	src/ClpDynamicMatrix.hpp
+	src/ClpEventHandler.hpp
+	src/ClpFactorization.hpp
+	src/ClpGubDynamicMatrix.hpp
+	src/ClpGubMatrix.hpp
+	src/ClpInterior.hpp
+	src/ClpLinearObjective.hpp
+	src/ClpMatrixBase.hpp
+	src/ClpMessage.hpp
+	src/ClpModel.hpp
+	src/ClpNetworkMatrix.hpp
+	src/ClpNonLinearCost.hpp
+	src/ClpNode.hpp
+	src/ClpObjective.hpp
+	src/ClpPackedMatrix.hpp
+	src/ClpPdcoBase.hpp
+	src/ClpPlusMinusOneMatrix.hpp
+	src/ClpParameters.hpp
+	src/ClpPresolve.hpp
+	src/ClpPrimalColumnDantzig.hpp
+	src/ClpPrimalColumnPivot.hpp
+	src/ClpPrimalColumnSteepest.hpp
+	src/ClpQuadraticObjective.hpp
+	src/ClpSimplex.hpp
+	src/ClpSimplexNonlinear.hpp
+	src/ClpSimplexOther.hpp
+	src/ClpSimplexDual.hpp
+	src/ClpSimplexPrimal.hpp
+	src/ClpSolve.hpp
+	src/CbcOrClpParam.hpp
+	src/Idiot.hpp)
+
+add_library(Clp ${_SRCS} ${_HDRS})
+target_include_directories(Clp PUBLIC
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+	$<INSTALL_INTERFACE:include/coin>)
+target_compile_definitions(Clp
+	PUBLIC HAVE_CONFIG_H
+	PRIVATE CLP_BUILD)
+if(WIN32)
+	target_compile_definitions(Clp _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE)
+endif ()
+target_link_libraries(Clp PUBLIC
+	CoinUtils::CoinUtils
+	Osi::Osi)
+set_target_properties(Clp PROPERTIES
+	PUBLIC_HEADER "${_HDRS};${CMAKE_CURRENT_BINARY_DIR}/config_clp.h"
+	VERSION ${VERSION})
+add_library(Clp::Clp ALIAS Clp)
+
+# Install
+include(GNUInstallDirs)
+install(TARGETS Clp
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/coin/
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	)
+
+##############
+##  OsiClp  ##
+##############
+set(_SRCS src/OsiClp/OsiClpSolverInterface.cpp)
+set(_HDRS	src/OsiClp/OsiClpSolverInterface.hpp)
+
+add_library(OsiClp ${_SRCS} ${_HDRS})
+target_include_directories(OsiClp PUBLIC
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/OsiClp>)
+#target_compile_definitions(OsiClp PRIVATE ...)
+if(WIN32)
+	target_compile_definitions(OsiClp _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE)
+endif ()
+target_link_libraries(OsiClp PUBLIC
+	CoinUtils::CoinUtils
+	Osi::Osi
+	Clp::Clp)
+set_target_properties(OsiClp PROPERTIES
+	PUBLIC_HEADER "${_HDRS}"
+	VERSION ${VERSION})
+add_library(OsiClp::OsiClp ALIAS OsiClp)
+
+# Install
+include(GNUInstallDirs)
+install(TARGETS OsiClp
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/coin/
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	)
+
+#################
+##  ClpSolver  ##
+#################
+set(_SRCS
+	src/ClpSolver.cpp
+	src/CbcOrClpParam.cpp
+	src/Clp_ampl.cpp
+	src/MyEventHandler.cpp
+	src/MyMessageHandler.cpp)
+
+set(_HDRS
+	src/CbcOrClpParam.hpp
+	src/Clp_ampl.h
+	src/MyEventHandler.hpp
+	src/MyMessageHandler.hpp)
+
+add_library(ClpSolver ${_SRCS} ${_HDRS})
+target_include_directories(ClpSolver PUBLIC
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)
+#target_compile_definitions(ClpSolver PRIVATE ...)
+if(WIN32)
+	target_compile_definitions(ClpSolver _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE)
+endif ()
+target_link_libraries(ClpSolver PUBLIC
+	Clp::Clp)
+set_target_properties(ClpSolver PROPERTIES
+	PUBLIC_HEADER "${_HDRS}"
+	VERSION ${VERSION})
+add_library(ClpSolver::ClpSolver ALIAS ClpSolver)
+
+# Install
+include(GNUInstallDirs)
+install(TARGETS ClpSolver
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/coin/
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	)
diff --git a/Clp/config.h.cmake.in b/Clp/config.h.cmake.in
new file mode 100644
index 0000000..c12b3d4
--- /dev/null
+++ b/Clp/config.h.cmake.in
@@ -0,0 +1,113 @@
+/*config.h. Generated by configure_file.*/
+
+#define COIN_HAS_COINUTILS 1
+#define COIN_HAS_OSI 1
+
+/* VERSION */
+#define VERSION "${VERSION}"
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+/* HAVE_MATH_H */
+#cmakedefine HAVE_MATH_H ${HAVE_MATH_H}
+/* HAVE_CTYPE_H */
+#cmakedefine HAVE_CTYPE_H ${HAVE_CTYPE_H}
+/* HAVE_INTTYPES_H */
+#cmakedefine HAVE_INTTYPES_H ${HAVE_INTTYPES_H}
+/* HAVE_FLOAT_H */
+#cmakedefine HAVE_FLOAT_H ${HAVE_FLOAT_H}
+/* HAVE_IEEEFP_H */
+#cmakedefine HAVE_IEEEFP_H ${HAVE_IEEEFP_H}
+/* HAVE_STDARG_H */
+#cmakedefine HAVE_STDARG_H ${HAVE_STDARG_H}
+/* HAVE_STDDEF_H */
+#cmakedefine HAVE_STDDEF_H ${HAVE_STDDEF_H}
+/* HAVE_STDINT_H */
+#cmakedefine HAVE_STDINT_H ${HAVE_STDINT_H}
+/* HAVE_STDIO_H */
+#cmakedefine HAVE_STDIO_H ${HAVE_STDIO_H}
+/* HAVE_STDLIB_H */
+#cmakedefine HAVE_STDLIB_H ${HAVE_STDLIB_H}
+/* HAVE_ASSERT_H */
+#cmakedefine HAVE_ASSERT_H ${HAVE_ASSERT_H}
+/* HAVE_DLFCN_H */
+#cmakedefine HAVE_DLFCN_H ${HAVE_DLFCN_H}
+/* HAVE_ENDIAN_H */
+#cmakedefine HAVE_ENDIAN_H ${HAVE_ENDIAN_H}
+/* HAVE_MEMORY_H */
+#cmakedefine HAVE_MEMORY_H ${HAVE_MEMORY_H}
+/* HAVE_STRINGS_H */
+#cmakedefine HAVE_STRINGS_H ${HAVE_STRINGS_H}
+/* HAVE_STRING_H */
+#cmakedefine HAVE_STRING_H ${HAVE_STRING_H}
+/* HAVE_TIME_H */
+#cmakedefine HAVE_TIME_H ${HAVE_TIME_H}
+/* HAVE_UNISTD_H */
+#cmakedefine HAVE_UNISTD_H ${HAVE_UNISTD_H}
+/* HAVE_SYS_STAT_H */
+#cmakedefine HAVE_SYS_STAT_H ${HAVE_SYS_STAT_H}
+/* HAVE_SYS_TYPES_H */
+#cmakedefine HAVE_SYS_TYPES_H ${HAVE_SYS_TYPES_H}
+
+/* HAVE_CMATH */
+#cmakedefine HAVE_CMATH ${HAVE_CMATH}
+/* HAVE_CCTYPE */
+#cmakedefine HAVE_CCTYPE ${HAVE_CCTYPE}
+/* HAVE_CINTTYPES */
+#cmakedefine HAVE_CINTTYPES ${HAVE_CINTTYPES}
+/* HAVE_CFLOAT */
+#cmakedefine HAVE_CFLOAT ${HAVE_CFLOAT}
+/* HAVE_CIEEEFP */
+#cmakedefine HAVE_CIEEEFP ${HAVE_CIEEEFP}
+/* HAVE_CSTDARG */
+#cmakedefine HAVE_CSTDARG ${HAVE_CSTDARG}
+/* HAVE_CSTDDEF */
+#cmakedefine HAVE_CSTDDEF ${HAVE_CSTDDEF}
+/* HAVE_CSTDINT */
+#cmakedefine HAVE_CSTDINT ${HAVE_CSTDINT}
+/* HAVE_CSTDIO */
+#cmakedefine HAVE_CSTDIO ${HAVE_CSTDIO}
+/* HAVE_CSTDLIB */
+#cmakedefine HAVE_CSTDLIB ${HAVE_CSTDLIB}
+/* HAVE_CASSERT */
+#cmakedefine HAVE_CASSERT ${HAVE_CASSERT}
+/* HAVE_CSTRING */
+#cmakedefine HAVE_CSTRING ${HAVE_CSTRING}
+/* HAVE_CTIME */
+#cmakedefine HAVE_CTIME ${HAVE_CTIME}
+
+/* COIN_C_FINITE */
+#cmakedefine COIN_C_FINITE ${COIN_C_FINITE}
+/* COIN_C_ISNAN */
+#cmakedefine COIN_C_ISNAN ${COIN_C_ISNAN}
+/* COIN_INT64_T */
+#cmakedefine COIN_INT64_T ${COIN_INT64_T}
+/* COIN_UINT64_T */
+#cmakedefine COIN_UINT64_T ${COIN_UINT64_T}
+/* COIN_INTPTR_T */
+#cmakedefine COIN_INTPTR_T ${COIN_INTPTR_T}
+
+/* COIN_${NAME}_CHECKLEVEL */
+#define COIN_${NAME}_CHECKLEVEL ${COIN_${NAME}_CHECKLEVEL}
+/* COIN_${NAME}_VERBOSITY */
+#define COIN_${NAME}_VERBOSITY ${COIN_${NAME}_VERBOSITY}
+
+/* PACKAGE */
+#cmakedefine PACKAGE
+/* PACKAGE_NAME */
+#cmakedefine PACKAGE_NAME
+/* PACKAGE_VERSION */
+#cmakedefine PACKAGE_VERSION
+/* PACKAGE_STRING */
+#cmakedefine PACKAGE_STRING
+/* PACKAGE_TARNAME */
+#cmakedefine PACKAGE_TARNAME
+/* PACKAGE_BUGREPORT */
+#cmakedefine PACKAGE_BUGREPORT
+
diff --git a/Clp/config_clp.h.cmake.in b/Clp/config_clp.h.cmake.in
new file mode 100644
index 0000000..8dc44bf
--- /dev/null
+++ b/Clp/config_clp.h.cmake.in
@@ -0,0 +1,13 @@
+#ifndef __CONFIG_${NAME}_H__
+#define __CONFIG_${NAME}_H__
+
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+#endif
diff --git a/CoinUtils/CMakeLists.txt b/CoinUtils/CMakeLists.txt
new file mode 100644
index 0000000..d4efa91
--- /dev/null
+++ b/CoinUtils/CMakeLists.txt
@@ -0,0 +1,160 @@
+message(STATUS "Subproject: CoinUtils")
+
+set(NAME "COINUTILS")
+parse_ac(VERSION MAJOR MINOR PATCH)
+
+set(COIN_${NAME}_CHECKLEVEL "0" CACHE INTERNAL
+	"${NAME} check level")
+set(COIN_${NAME}_VERBOSITY "0" CACHE INTERNAL
+	"${NAME} verbosity level")
+configure_file(config.h.cmake.in config.h)
+configure_file(config_coinutils.h.cmake.in config_coinutils.h)
+
+set(_SRCS
+	src/CoinAlloc.cpp
+	src/CoinBuild.cpp
+	src/CoinDenseVector.cpp
+	src/CoinError.cpp
+	src/CoinFactorization1.cpp
+	src/CoinFactorization2.cpp
+	src/CoinFactorization3.cpp
+	src/CoinFactorization4.cpp
+	src/CoinSimpFactorization.cpp
+	src/CoinDenseFactorization.cpp
+	src/CoinOslFactorization.cpp
+	src/CoinOslFactorization2.cpp
+	src/CoinOslFactorization3.cpp
+	src/CoinFileIO.cpp
+	src/CoinFinite.cpp
+	src/CoinIndexedVector.cpp
+	src/CoinLpIO.cpp
+	src/CoinMessage.cpp
+	src/CoinMessageHandler.cpp
+	src/CoinModel.cpp
+	src/CoinStructuredModel.cpp
+	src/CoinModelUseful.cpp
+	src/CoinModelUseful2.cpp
+	src/CoinMpsIO.cpp
+	src/CoinPackedMatrix.cpp
+	src/CoinPackedVector.cpp
+	src/CoinPackedVectorBase.cpp
+	src/CoinParam.cpp
+	src/CoinParamUtils.cpp
+	src/CoinPostsolveMatrix.cpp
+	src/CoinPrePostsolveMatrix.cpp
+	src/CoinPresolveDoubleton.cpp
+	src/CoinPresolveDual.cpp
+	src/CoinPresolveDupcol.cpp
+	src/CoinPresolveEmpty.cpp
+	src/CoinPresolveFixed.cpp
+	src/CoinPresolveForcing.cpp
+	src/CoinPresolveHelperFunctions.cpp
+	src/CoinPresolveImpliedFree.cpp
+	src/CoinPresolveIsolated.cpp
+	src/CoinPresolveMatrix.cpp
+	src/CoinPresolvePsdebug.cpp
+	src/CoinPresolveMonitor.cpp
+	src/CoinPresolveSingleton.cpp
+	src/CoinPresolveSubst.cpp
+	src/CoinPresolveTighten.cpp
+	src/CoinPresolveTripleton.cpp
+	src/CoinPresolveUseless.cpp
+	src/CoinPresolveZeros.cpp
+	src/CoinSearchTree.cpp
+	src/CoinShallowPackedVector.cpp
+	src/CoinSnapshot.cpp
+	src/CoinWarmStartBasis.cpp
+	src/CoinWarmStartVector.cpp
+	src/CoinWarmStartDual.cpp
+	src/CoinWarmStartPrimalDual.cpp
+	src/CoinRational.cpp)
+
+set(_HDRS
+	src/Coin_C_defines.h
+	src/CoinUtilsConfig.h
+	src/CoinAlloc.hpp
+	src/CoinBuild.hpp
+	src/CoinDenseVector.hpp
+	src/CoinDistance.hpp
+	src/CoinError.hpp
+	src/CoinFactorization.hpp
+	src/CoinSimpFactorization.hpp
+	src/CoinDenseFactorization.hpp
+	src/CoinOslFactorization.hpp
+	src/CoinFileIO.hpp
+	src/CoinFinite.hpp
+	src/CoinFloatEqual.hpp
+	src/CoinHelperFunctions.hpp
+	src/CoinIndexedVector.hpp
+	src/CoinLpIO.hpp
+	src/CoinMessage.hpp
+	src/CoinMessageHandler.hpp
+	src/CoinModel.hpp
+	src/CoinStructuredModel.hpp
+	src/CoinModelUseful.hpp
+	src/CoinMpsIO.hpp
+	src/CoinPackedMatrix.hpp
+	src/CoinPackedVector.hpp
+	src/CoinPackedVectorBase.hpp
+	src/CoinParam.hpp
+	src/CoinPragma.hpp
+	src/CoinPresolveDoubleton.hpp
+	src/CoinPresolveDual.hpp
+	src/CoinPresolveDupcol.hpp
+	src/CoinPresolveEmpty.hpp
+	src/CoinPresolveFixed.hpp
+	src/CoinPresolveForcing.hpp
+	src/CoinPresolveImpliedFree.hpp
+	src/CoinPresolveIsolated.hpp
+	src/CoinPresolveMatrix.hpp
+	src/CoinPresolveMonitor.hpp
+	src/CoinPresolvePsdebug.hpp
+	src/CoinPresolveSingleton.hpp
+	src/CoinPresolveSubst.hpp
+	src/CoinPresolveTighten.hpp
+	src/CoinPresolveTripleton.hpp
+	src/CoinPresolveUseless.hpp
+	src/CoinPresolveZeros.hpp
+	src/CoinSearchTree.hpp
+	src/CoinShallowPackedVector.hpp
+	src/CoinSignal.hpp
+	src/CoinSmartPtr.hpp
+	src/CoinSnapshot.hpp
+	src/CoinSort.hpp
+	src/CoinTime.hpp
+	src/CoinTypes.hpp
+	src/CoinUtility.hpp
+	src/CoinWarmStart.hpp
+	src/CoinWarmStartBasis.hpp
+	src/CoinWarmStartVector.hpp
+	src/CoinWarmStartDual.hpp
+	src/CoinWarmStartPrimalDual.hpp
+	src/CoinRational.hpp)
+
+add_library(CoinUtils ${_SRCS} ${_HDRS})
+target_include_directories(CoinUtils PUBLIC
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+	$<INSTALL_INTERFACE:include/coin>)
+target_compile_definitions(CoinUtils
+	PUBLIC HAVE_CONFIG_H
+	PRIVATE COINUTILS_BUILD)
+if(WIN32)
+	target_compile_definitions(CoinUtils _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE)
+endif ()
+target_link_libraries(CoinUtils PRIVATE
+	ZLIB::ZLIB
+	Threads::Threads)
+set_target_properties(CoinUtils PROPERTIES
+	PUBLIC_HEADER "${_HDRS};${CMAKE_CURRENT_BINARY_DIR}/config_coinutils.h"
+	VERSION ${VERSION})
+add_library(CoinUtils::CoinUtils ALIAS CoinUtils)
+
+# Install
+include(GNUInstallDirs)
+install(TARGETS CoinUtils
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/coin/
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	)
diff --git a/CoinUtils/config.h.cmake.in b/CoinUtils/config.h.cmake.in
new file mode 100644
index 0000000..c493b43
--- /dev/null
+++ b/CoinUtils/config.h.cmake.in
@@ -0,0 +1,127 @@
+/*config.h. Generated by configure_file.*/
+
+/* VERSION */
+#define VERSION "${VERSION}"
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+/* HAVE_MATH_H */
+#cmakedefine HAVE_MATH_H ${HAVE_MATH_H}
+/* HAVE_CTYPE_H */
+#cmakedefine HAVE_CTYPE_H ${HAVE_CTYPE_H}
+/* HAVE_INTTYPES_H */
+#cmakedefine HAVE_INTTYPES_H ${HAVE_INTTYPES_H}
+/* HAVE_FLOAT_H */
+#cmakedefine HAVE_FLOAT_H ${HAVE_FLOAT_H}
+/* HAVE_IEEEFP_H */
+#cmakedefine HAVE_IEEEFP_H ${HAVE_IEEEFP_H}
+/* HAVE_STDARG_H */
+#cmakedefine HAVE_STDARG_H ${HAVE_STDARG_H}
+/* HAVE_STDDEF_H */
+#cmakedefine HAVE_STDDEF_H ${HAVE_STDDEF_H}
+/* HAVE_STDINT_H */
+#cmakedefine HAVE_STDINT_H ${HAVE_STDINT_H}
+/* HAVE_STDIO_H */
+#cmakedefine HAVE_STDIO_H ${HAVE_STDIO_H}
+/* HAVE_STDLIB_H */
+#cmakedefine HAVE_STDLIB_H ${HAVE_STDLIB_H}
+/* HAVE_ASSERT_H */
+#cmakedefine HAVE_ASSERT_H ${HAVE_ASSERT_H}
+/* HAVE_DLFCN_H */
+#cmakedefine HAVE_DLFCN_H ${HAVE_DLFCN_H}
+/* HAVE_ENDIAN_H */
+#cmakedefine HAVE_ENDIAN_H ${HAVE_ENDIAN_H}
+/* HAVE_MEMORY_H */
+#cmakedefine HAVE_MEMORY_H ${HAVE_MEMORY_H}
+/* HAVE_STRINGS_H */
+#cmakedefine HAVE_STRINGS_H ${HAVE_STRINGS_H}
+/* HAVE_STRING_H */
+#cmakedefine HAVE_STRING_H ${HAVE_STRING_H}
+/* HAVE_TIME_H */
+#cmakedefine HAVE_TIME_H ${HAVE_TIME_H}
+/* HAVE_UNISTD_H */
+#cmakedefine HAVE_UNISTD_H ${HAVE_UNISTD_H}
+/* HAVE_SYS_STAT_H */
+#cmakedefine HAVE_SYS_STAT_H ${HAVE_SYS_STAT_H}
+/* HAVE_SYS_TYPES_H */
+#cmakedefine HAVE_SYS_TYPES_H ${HAVE_SYS_TYPES_H}
+
+/* HAVE_CMATH */
+#cmakedefine HAVE_CMATH ${HAVE_CMATH}
+/* HAVE_CCTYPE */
+#cmakedefine HAVE_CCTYPE ${HAVE_CCTYPE}
+/* HAVE_CINTTYPES */
+#cmakedefine HAVE_CINTTYPES ${HAVE_CINTTYPES}
+/* HAVE_CFLOAT */
+#cmakedefine HAVE_CFLOAT ${HAVE_CFLOAT}
+/* HAVE_CIEEEFP */
+#cmakedefine HAVE_CIEEEFP ${HAVE_CIEEEFP}
+/* HAVE_CSTDARG */
+#cmakedefine HAVE_CSTDARG ${HAVE_CSTDARG}
+/* HAVE_CSTDDEF */
+#cmakedefine HAVE_CSTDDEF ${HAVE_CSTDDEF}
+/* HAVE_CSTDINT */
+#cmakedefine HAVE_CSTDINT ${HAVE_CSTDINT}
+/* HAVE_CSTDIO */
+#cmakedefine HAVE_CSTDIO ${HAVE_CSTDIO}
+/* HAVE_CSTDLIB */
+#cmakedefine HAVE_CSTDLIB ${HAVE_CSTDLIB}
+/* HAVE_CASSERT */
+#cmakedefine HAVE_CASSERT ${HAVE_CASSERT}
+/* HAVE_CSTRING */
+#cmakedefine HAVE_CSTRING ${HAVE_CSTRING}
+/* HAVE_CTIME */
+#cmakedefine HAVE_CTIME ${HAVE_CTIME}
+
+/* STDC_HEADERS */
+#cmakedefine STDC_HEADERS ${STDC_HEADERS}
+/* COIN_C_FINITE */
+#cmakedefine COIN_C_FINITE ${COIN_C_FINITE}
+/* COIN_C_ISNAN */
+#cmakedefine COIN_C_ISNAN ${COIN_C_ISNAN}
+/* COIN_INT64_T */
+#cmakedefine COIN_INT64_T ${COIN_INT64_T}
+/* COIN_UINT64_T */
+#cmakedefine COIN_UINT64_T ${COIN_UINT64_T}
+/* COIN_INTPTR_T */
+#cmakedefine COIN_INTPTR_T ${COIN_INTPTR_T}
+
+/* COIN_${NAME}_CHECKLEVEL */
+#define COIN_${NAME}_CHECKLEVEL ${COIN_${NAME}_CHECKLEVEL}
+/* COIN_${NAME}_VERBOSITY */
+#define COIN_${NAME}_VERBOSITY ${COIN_${NAME}_VERBOSITY}
+
+/* ${NAME}_HAS_CSTDINT */
+#ifdef HAVE_CSTDINT
+  #define ${NAME}_HAS_CSTDINT 1
+#endif
+
+/* ${NAME}_PTHREADS */
+#define ${NAME}_PTHREADS 1
+/* ${NAME}_MEMPOOL_MAXPOOLED */
+#define ${NAME}_MEMPOOL_MAXPOOLED -1
+
+/* HAVE_ZLIB_H */
+#cmakedefine HAVE_ZLIB_H ${HAVE_ZLIB_H}
+/* COIN_HAS_ZLIB */
+#cmakedefine COIN_HAS_ZLIB ${COIN_HAS_ZLIB}
+
+/* PACKAGE */
+#cmakedefine PACKAGE
+/* PACKAGE_NAME */
+#cmakedefine PACKAGE_NAME
+/* PACKAGE_VERSION */
+#cmakedefine PACKAGE_VERSION
+/* PACKAGE_STRING */
+#cmakedefine PACKAGE_STRING
+/* PACKAGE_TARNAME */
+#cmakedefine PACKAGE_TARNAME
+/* PACKAGE_BUGREPORT */
+#cmakedefine PACKAGE_BUGREPORT
+
diff --git a/CoinUtils/config_coinutils.h.cmake.in b/CoinUtils/config_coinutils.h.cmake.in
new file mode 100644
index 0000000..0d85fd7
--- /dev/null
+++ b/CoinUtils/config_coinutils.h.cmake.in
@@ -0,0 +1,22 @@
+#ifndef __CONFIG_${NAME}_H__
+#define __CONFIG_${NAME}_H__
+
+#define ${NAME}_HAS_CSTDINT 1
+
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+/* COIN_INT64_T */
+#cmakedefine COIN_INT64_T ${COIN_INT64_T}
+/* COIN_UINT64_T */
+#cmakedefine COIN_UINT64_T ${COIN_UINT64_T}
+/* COIN_INTPTR_T */
+#cmakedefine COIN_INTPTR_T ${COIN_INTPTR_T}
+
+#endif
diff --git a/Osi/CMakeLists.txt b/Osi/CMakeLists.txt
new file mode 100644
index 0000000..5bf646a
--- /dev/null
+++ b/Osi/CMakeLists.txt
@@ -0,0 +1,70 @@
+message(STATUS "Subproject: Osi")
+
+find_package(CoinUtils REQUIRED)
+
+set(NAME "OSI")
+parse_ac(VERSION MAJOR MINOR PATCH)
+
+set(COIN_${NAME}_CHECKLEVEL "0" CACHE INTERNAL
+	"${NAME} check level")
+set(COIN_${NAME}_VERBOSITY "0" CACHE INTERNAL
+	"${NAME} verbosity level")
+configure_file(config.h.cmake.in config.h)
+configure_file(config_osi.h.cmake.in config_osi.h)
+
+set(_SRCS
+	src/Osi/OsiAuxInfo.cpp
+	src/Osi/OsiBranchingObject.cpp
+	src/Osi/OsiChooseVariable.cpp
+	src/Osi/OsiColCut.cpp
+	src/Osi/OsiCut.cpp
+	src/Osi/OsiCuts.cpp
+	src/Osi/OsiNames.cpp
+	src/Osi/OsiPresolve.cpp
+	src/Osi/OsiRowCut.cpp
+	src/Osi/OsiRowCutDebugger.cpp
+	src/Osi/OsiSolverBranch.cpp
+	src/Osi/OsiSolverInterface.cpp)
+
+set(_HDRS
+	src/Osi/OsiConfig.h
+	src/Osi/OsiAuxInfo.hpp
+	src/Osi/OsiBranchingObject.hpp
+	src/Osi/OsiChooseVariable.hpp
+	src/Osi/OsiColCut.hpp
+	src/Osi/OsiCollections.hpp
+	src/Osi/OsiCut.hpp
+	src/Osi/OsiCuts.hpp
+	src/Osi/OsiPresolve.hpp
+	src/Osi/OsiRowCut.hpp
+	src/Osi/OsiRowCutDebugger.hpp
+	src/Osi/OsiSolverBranch.hpp
+	src/Osi/OsiSolverInterface.hpp
+	src/Osi/OsiSolverParameters.hpp)
+
+add_library(Osi ${_SRCS} ${_HDRS})
+target_include_directories(Osi PUBLIC
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/Osi>
+	$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+	$<INSTALL_INTERFACE:include/coin>)
+target_compile_definitions(Osi
+	PUBLIC HAVE_CONFIG_H
+	PRIVATE OSI_BUILD)
+if(WIN32)
+	target_compile_definitions(Osi _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE)
+endif ()
+target_link_libraries(Osi PUBLIC
+	CoinUtils::CoinUtils)
+set_target_properties(Osi PROPERTIES
+	PUBLIC_HEADER "${_HDRS};${CMAKE_CURRENT_BINARY_DIR}/config_osi.h"
+	VERSION ${VERSION})
+add_library(Osi::Osi ALIAS Osi)
+
+# Install
+include(GNUInstallDirs)
+install(TARGETS Osi
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/coin/
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	)
diff --git a/Osi/config.h.cmake.in b/Osi/config.h.cmake.in
new file mode 100644
index 0000000..f544df8
--- /dev/null
+++ b/Osi/config.h.cmake.in
@@ -0,0 +1,112 @@
+/*config.h. Generated by configure_file.*/
+
+#define COIN_HAS_COINUTILS 1
+
+/* VERSION */
+#define VERSION "${VERSION}"
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+/* HAVE_MATH_H */
+#cmakedefine HAVE_MATH_H ${HAVE_MATH_H}
+/* HAVE_CTYPE_H */
+#cmakedefine HAVE_CTYPE_H ${HAVE_CTYPE_H}
+/* HAVE_INTTYPES_H */
+#cmakedefine HAVE_INTTYPES_H ${HAVE_INTTYPES_H}
+/* HAVE_FLOAT_H */
+#cmakedefine HAVE_FLOAT_H ${HAVE_FLOAT_H}
+/* HAVE_IEEEFP_H */
+#cmakedefine HAVE_IEEEFP_H ${HAVE_IEEEFP_H}
+/* HAVE_STDARG_H */
+#cmakedefine HAVE_STDARG_H ${HAVE_STDARG_H}
+/* HAVE_STDDEF_H */
+#cmakedefine HAVE_STDDEF_H ${HAVE_STDDEF_H}
+/* HAVE_STDINT_H */
+#cmakedefine HAVE_STDINT_H ${HAVE_STDINT_H}
+/* HAVE_STDIO_H */
+#cmakedefine HAVE_STDIO_H ${HAVE_STDIO_H}
+/* HAVE_STDLIB_H */
+#cmakedefine HAVE_STDLIB_H ${HAVE_STDLIB_H}
+/* HAVE_ASSERT_H */
+#cmakedefine HAVE_ASSERT_H ${HAVE_ASSERT_H}
+/* HAVE_DLFCN_H */
+#cmakedefine HAVE_DLFCN_H ${HAVE_DLFCN_H}
+/* HAVE_ENDIAN_H */
+#cmakedefine HAVE_ENDIAN_H ${HAVE_ENDIAN_H}
+/* HAVE_MEMORY_H */
+#cmakedefine HAVE_MEMORY_H ${HAVE_MEMORY_H}
+/* HAVE_STRINGS_H */
+#cmakedefine HAVE_STRINGS_H ${HAVE_STRINGS_H}
+/* HAVE_STRING_H */
+#cmakedefine HAVE_STRING_H ${HAVE_STRING_H}
+/* HAVE_TIME_H */
+#cmakedefine HAVE_TIME_H ${HAVE_TIME_H}
+/* HAVE_UNISTD_H */
+#cmakedefine HAVE_UNISTD_H ${HAVE_UNISTD_H}
+/* HAVE_SYS_STAT_H */
+#cmakedefine HAVE_SYS_STAT_H ${HAVE_SYS_STAT_H}
+/* HAVE_SYS_TYPES_H */
+#cmakedefine HAVE_SYS_TYPES_H ${HAVE_SYS_TYPES_H}
+
+/* HAVE_CMATH */
+#cmakedefine HAVE_CMATH ${HAVE_CMATH}
+/* HAVE_CCTYPE */
+#cmakedefine HAVE_CCTYPE ${HAVE_CCTYPE}
+/* HAVE_CINTTYPES */
+#cmakedefine HAVE_CINTTYPES ${HAVE_CINTTYPES}
+/* HAVE_CFLOAT */
+#cmakedefine HAVE_CFLOAT ${HAVE_CFLOAT}
+/* HAVE_CIEEEFP */
+#cmakedefine HAVE_CIEEEFP ${HAVE_CIEEEFP}
+/* HAVE_CSTDARG */
+#cmakedefine HAVE_CSTDARG ${HAVE_CSTDARG}
+/* HAVE_CSTDDEF */
+#cmakedefine HAVE_CSTDDEF ${HAVE_CSTDDEF}
+/* HAVE_CSTDINT */
+#cmakedefine HAVE_CSTDINT ${HAVE_CSTDINT}
+/* HAVE_CSTDIO */
+#cmakedefine HAVE_CSTDIO ${HAVE_CSTDIO}
+/* HAVE_CSTDLIB */
+#cmakedefine HAVE_CSTDLIB ${HAVE_CSTDLIB}
+/* HAVE_CASSERT */
+#cmakedefine HAVE_CASSERT ${HAVE_CASSERT}
+/* HAVE_CSTRING */
+#cmakedefine HAVE_CSTRING ${HAVE_CSTRING}
+/* HAVE_CTIME */
+#cmakedefine HAVE_CTIME ${HAVE_CTIME}
+
+/* COIN_C_FINITE */
+#cmakedefine COIN_C_FINITE ${COIN_C_FINITE}
+/* COIN_C_ISNAN */
+#cmakedefine COIN_C_ISNAN ${COIN_C_ISNAN}
+/* COIN_INT64_T */
+#cmakedefine COIN_INT64_T ${COIN_INT64_T}
+/* COIN_UINT64_T */
+#cmakedefine COIN_UINT64_T ${COIN_UINT64_T}
+/* COIN_INTPTR_T */
+#cmakedefine COIN_INTPTR_T ${COIN_INTPTR_T}
+
+/* COIN_${NAME}_CHECKLEVEL */
+#define COIN_${NAME}_CHECKLEVEL ${COIN_${NAME}_CHECKLEVEL}
+/* COIN_${NAME}_VERBOSITY */
+#define COIN_${NAME}_VERBOSITY ${COIN_${NAME}_VERBOSITY}
+
+/* PACKAGE */
+#cmakedefine PACKAGE
+/* PACKAGE_NAME */
+#cmakedefine PACKAGE_NAME
+/* PACKAGE_VERSION */
+#cmakedefine PACKAGE_VERSION
+/* PACKAGE_STRING */
+#cmakedefine PACKAGE_STRING
+/* PACKAGE_TARNAME */
+#cmakedefine PACKAGE_TARNAME
+/* PACKAGE_BUGREPORT */
+#cmakedefine PACKAGE_BUGREPORT
+
diff --git a/Osi/config_osi.h.cmake.in b/Osi/config_osi.h.cmake.in
new file mode 100644
index 0000000..8dc44bf
--- /dev/null
+++ b/Osi/config_osi.h.cmake.in
@@ -0,0 +1,13 @@
+#ifndef __CONFIG_${NAME}_H__
+#define __CONFIG_${NAME}_H__
+
+/* ${NAME}_VERSION */
+#define ${NAME}_VERSION "${VERSION}"
+/* ${NAME}_VERSION_MAJOR */
+#define ${NAME}_VERSION_MAJOR ${MAJOR}
+/* ${NAME}_VERSION_MINOR */
+#define ${NAME}_VERSION_MINOR ${MINOR}
+/* ${NAME}_VERSION_RELEASE */
+#define ${NAME}_VERSION_RELEASE ${PATCH}
+
+#endif
diff --git a/cmake/ParseAc.cmake b/cmake/ParseAc.cmake
new file mode 100644
index 0000000..e12dcae
--- /dev/null
+++ b/cmake/ParseAc.cmake
@@ -0,0 +1,11 @@
+function(parse_ac VERSION_STRING VERSION_MAJOR VERSION_MINOR VERSION_PATCH)
+  file(READ "configure.ac" IN)
+  # AC_INIT([Cbc],[2.9.9],[url or email])
+	string(REGEX MATCH
+		"AC_INIT\\([^,]+,\\[([0-9]+)\\.([0-9]+)\\.([0-9]+)\\],[^\\)]+\\)" AC_INIT ${IN})
+	#message(STATUS "AC_INIT: ${AC_INIT}")
+	set(${VERSION_MAJOR} ${CMAKE_MATCH_1} PARENT_SCOPE)
+	set(${VERSION_MINOR} ${CMAKE_MATCH_2} PARENT_SCOPE)
+	set(${VERSION_PATCH} ${CMAKE_MATCH_3} PARENT_SCOPE)
+	set(${VERSION_STRING} "${CMAKE_MATCH_1}.${CMAKE_MATCH_2}.${CMAKE_MATCH_3}" PARENT_SCOPE)
+endfunction()
